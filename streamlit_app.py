# -*- coding: utf-8 -*-
"""
Aplicativo Streamlit para OCR de Documentos (RG, CNH, etc.)
Permite upload de PDF, PNG, JPG e extrai texto em portugu√™s.
"""

# 1. Imports necess√°rios
import streamlit as st
from PIL import Image
import pytesseract
from pdf2image import convert_from_bytes # Requer 'poppler-utils' no ambiente
import io
import os

# --- Configura√ß√£o do Tesseract (Importante para teste local) ---
# No Streamlit Cloud, geralmente n√£o √© necess√°rio se 'tesseract-ocr' e
# 'tesseract-ocr-por' estiverem em packages.txt.
# Descomente e ajuste os caminhos se estiver rodando localmente e o Tesseract
# n√£o estiver no PATH do sistema.
# Exemplo Linux/macOS:
# pytesseract.tesseract_cmd = '/usr/local/bin/tesseract' ou '/usr/bin/tesseract'
# Exemplo Windows:
# pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
# Para dados de linguagem (se n√£o encontrados automaticamente):
# tessdata_dir_config = r'--tessdata-dir "C:\Program Files\Tesseract-OCR\tessdata"'
# --- Fim da Configura√ß√£o do Tesseract ---

# 2. Fun√ß√£o para realizar OCR
def perform_ocr(file_bytes, file_type):
    """
    Realiza OCR nos bytes de uma imagem ou PDF.

    Args:
        file_bytes (bytes): Os bytes do arquivo carregado.
        file_type (str): O tipo MIME do arquivo (ex: 'image/png', 'application/pdf').

    Returns:
        tuple: Uma tupla contendo (PIL.Image ou None, str ou None).
               A imagem (primeira p√°gina do PDF) para exibi√ß√£o e o texto extra√≠do.
               Retorna (None, None) em caso de erro grave.
    """
    extracted_text = ""
    display_image = None
    images_to_process = []

    try:
        # Processa imagens PNG ou JPEG
        if file_type in ['image/png', 'image/jpeg', 'image/jpg']:
            image = Image.open(io.BytesIO(file_bytes))
            # Converte para RGB para garantir compatibilidade com Tesseract
            if image.mode != 'RGB':
                image = image.convert('RGB')
            images_to_process.append(image)
            display_image = image # Define a imagem para exibi√ß√£o

        # Processa arquivos PDF
        elif file_type == 'application/pdf':
            st.info("Convertendo PDF para imagens (pode levar um momento)...")
            # Converte todas as p√°ginas do PDF para imagens PIL
            # Requer que 'poppler-utils' esteja instalado no sistema (via packages.txt no Cloud)
            pdf_images = convert_from_bytes(file_bytes, dpi=300) # DPI mais alto para melhor OCR
            if pdf_images:
                images_to_process.extend(pdf_images)
                display_image = pdf_images[0] # Define a primeira p√°gina para exibi√ß√£o
            else:
                st.warning("N√£o foi poss√≠vel extrair imagens do PDF.")
                return None, None

        # Tipo de arquivo n√£o suportado
        else:
            st.error(f"Tipo de arquivo n√£o suportado: {file_type}")
            return None, None

        # Verifica se alguma imagem foi carregada/extra√≠da
        if not images_to_process:
             st.warning("Nenhuma imagem encontrada ou extra√≠da do arquivo.")
             return display_image, "" # Retorna imagem de display (se houver) e texto vazio

        # Realiza OCR em cada imagem extra√≠da
        st.info(f"Realizando OCR em {len(images_to_process)} imagem(ns)...")
        full_text_list = []
        for i, img in enumerate(images_to_process):
             # Usa o modelo de linguagem 'por' (Portugu√™s)
             try:
                 text = pytesseract.image_to_string(img, lang='por')
                 if len(images_to_process) > 1:
                     full_text_list.append(f"--- P√°gina {i+1} ---\n{text}")
                 else:
                     full_text_list.append(text)
             except pytesseract.TesseractError as tess_err:
                 st.error(f"Erro do Tesseract na imagem {i+1}: {tess_err}")
                 st.info("Verifique se o Tesseract e o pacote de linguagem 'por' est√£o instalados corretamente.")
                 full_text_list.append(f"--- P√°gina {i+1}: Erro no OCR ---")
             except Exception as ocr_err:
                 st.error(f"Erro inesperado durante o OCR na imagem {i+1}: {ocr_err}")
                 full_text_list.append(f"--- P√°gina {i+1}: Erro no OCR ---")


        extracted_text = "\n\n".join(full_text_list)
        return display_image, extracted_text.strip()

    # Tratamento de erros espec√≠ficos
    except ImportError as import_err:
        if 'pdf2image' in str(import_err) or 'poppler' in str(import_err):
             st.error("Erro: A biblioteca 'pdf2image' ou sua depend√™ncia 'poppler' n√£o foi encontrada.")
             st.info("Para rodar localmente, instale o Poppler (veja a documenta√ß√£o do pdf2image). Para deploy no Streamlit Cloud, adicione 'poppler-utils' ao seu arquivo 'packages.txt'.")
        else:
             st.error(f"Erro de importa√ß√£o: {import_err}")
        return None, None
    except pytesseract.TesseractNotFoundError:
        st.error("Erro Cr√≠tico: O execut√°vel do Tesseract OCR n√£o foi encontrado.")
        st.info("Certifique-se de que o Tesseract est√° instalado e acess√≠vel no PATH do sistema. No Streamlit Cloud, adicione 'tesseract-ocr' e 'tesseract-ocr-por' ao seu 'packages.txt'.")
        return None, None
    except Exception as e:
        st.error(f"Ocorreu um erro inesperado durante o processamento: {e}")
        # Tenta retornar a imagem de display se ela foi carregada antes do erro
        return display_image if 'display_image' in locals() else None, None

# 3. Interface do Aplicativo Streamlit
st.set_page_config(layout="wide", page_title="OCR de Documentos")

# Sidebar com instru√ß√µes de deploy
st.sidebar.title("Notas de Deploy (Streamlit Cloud)")
st.sidebar.info(
    """
    Para fazer o deploy deste aplicativo no Streamlit Cloud:

    1.  **Crie um arquivo `requirements.txt`:**
        ```
        streamlit
        pillow
        pytesseract
        pdf2image
        ```
        *(Certifique-se de usar vers√µes compat√≠veis se necess√°rio)*

    2.  **Crie um arquivo `packages.txt`:**
        Este arquivo informa ao Streamlit Cloud quais pacotes do sistema (Debian) instalar.
        ```
        tesseract-ocr
        tesseract-ocr-por
        poppler-utils
        ```

    3.  Fa√ßa o upload do seu script Python (`app.py` ou similar), `requirements.txt`, e `packages.txt` para um reposit√≥rio GitHub.
    4.  Conecte seu reposit√≥rio ao Streamlit Cloud e fa√ßa o deploy.
    """
)
st.sidebar.markdown("---")
st.sidebar.markdown("Desenvolvido com [Streamlit](https://streamlit.io/) e [Tesseract OCR](https://github.com/tesseract-ocr/tesseract).")


# T√≠tulo principal
st.title("üîç Aplicativo OCR para Documentos Brasileiros")
st.markdown("Fa√ßa upload de um arquivo de imagem (`PNG`, `JPG`) ou `PDF` contendo documentos como RG, CNH, etc., para extrair o texto.")

# Componente de upload de arquivo
uploaded_file = st.file_uploader(
    "Selecione o arquivo",
    type=['pdf', 'png', 'jpg', 'jpeg'],
    help="Arraste e solte ou clique para selecionar o arquivo."
)

# Processamento ap√≥s o upload
if uploaded_file is not None:
    # L√™ os bytes do arquivo para processamento
    file_bytes = uploaded_file.getvalue()
    file_type = uploaded_file.type
    file_name = uploaded_file.name

    st.write("---")
    st.write(f"Arquivo carregado: **{file_name}** ({file_type})")

    # Layout em duas colunas
    col1, col2 = st.columns(2)

    extracted_text = None # Inicializa a vari√°vel de texto extra√≠do

    with col1:
        st.subheader("Visualiza√ß√£o Pr√©via")
        try:
            # Tenta exibir a imagem diretamente ou a primeira p√°gina do PDF
            if file_type in ['image/png', 'image/jpeg', 'image/jpg']:
                image = Image.open(io.BytesIO(file_bytes))
                st.image(image, caption='Imagem Carregada', use_column_width='auto')
            elif file_type == 'application/pdf':
                st.info("Exibindo a primeira p√°gina do PDF...")
                # Usa DPI menor para preview mais r√°pido
                preview_images = convert_from_bytes(file_bytes, dpi=150, first_page=1, last_page=1)
                if preview_images:
                    st.image(preview_images[0], caption='Primeira P√°gina do PDF', use_column_width='auto')
                else:
                    st.warning("N√£o foi poss√≠vel gerar a visualiza√ß√£o do PDF.")
            else:
                st.warning("Visualiza√ß√£o n√£o dispon√≠vel para este tipo de arquivo.")
        except ImportError:
             st.error("Erro ao gerar visualiza√ß√£o do PDF: 'poppler' n√£o encontrado. Verifique a instala√ß√£o (packages.txt).")
        except Exception as e:
            st.error(f"Erro ao carregar visualiza√ß√£o: {e}")

    with col2:
        st.subheader("Extra√ß√£o de Texto (OCR)")
        # Bot√£o para iniciar o processo de OCR
        if st.button("‚ú® Extrair Texto do Documento"):
            with st.spinner('Processando OCR... Isso pode levar alguns segundos, especialmente para PDFs.'):
                # Chama a fun√ß√£o principal de OCR
                _, ocr_result = perform_ocr(file_bytes, file_type)
                extracted_text = ocr_result # Armazena o resultado

            if extracted_text is not None and extracted_text:
                st.success("OCR conclu√≠do com sucesso!")
            elif extracted_text == "":
                 st.warning("O OCR foi conclu√≠do, mas nenhum texto foi detectado na imagem/documento.")
            else:
                # Mensagens de erro j√° s√£o exibidas dentro de perform_ocr
                st.error("Falha no processo de OCR. Verifique as mensagens de erro acima.")

        # Exibe o texto extra√≠do se o OCR foi executado
        if extracted_text is not None:
            st.text_area(
                "Texto Extra√≠do:",
                extracted_text,
                height=400,
                help="O texto extra√≠do do documento. Pode conter erros dependendo da qualidade da imagem."
            )
        elif 'ocr_result' not in locals(): # Se o bot√£o ainda n√£o foi clicado
             st.info("Clique no bot√£o 'Extrair Texto do Documento' para iniciar o OCR.")


else:
    st.info("Aguardando o upload de um arquivo PDF, PNG ou JPG.")

st.write("---")
st.caption("Observa√ß√£o: A precis√£o do OCR depende da qualidade e resolu√ß√£o da imagem ou do PDF.")
